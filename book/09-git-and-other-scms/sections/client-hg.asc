==== Git і Mercurial

(((Interoperation with other VCSs, Mercurial)))
(((Mercurial)))
Всесвіт розподілених систем контролю версій значно більший, ніж просто Git.
Насправді, існує багато інших систем, кожна зі своїм власним поглядом на процес розподіленого контролю версій.
Окрім Git, найпопулярнішою з них є Mercurial, і ці дві системи мають багато спільного.

Хорошою новиною є те, що якщо ви надаєте перевагу Git, але вам доводиться працювати з проектами, код яких знаходиться в системі Mercurial, існує спосіб використання Git у якості клієнта для роботи з репозиторієм на Mercurial.
Оскільки Git працює з серверами через концепцію "віддалених репозиторіїв" (remotes), не дивно, що цей міст реалізовано за допомогою своєрідного "помічника протоколу" (remote helper) для "віддалених репозиторіїв".
Проект, який реалізує вищесказане, називається `git-remote-hg` і розміщений за адресою https://github.com/felipec/git-remote-hg[].

===== git-remote-hg

Для початку, вам потрібно встановити `git-remote-hg`.
Для цього скопіюйте файл до директорії, що є у вашому `PATH`, наприклад:

[source,console]
----
$ curl -o ~/bin/git-remote-hg \
  https://raw.githubusercontent.com/felipec/git-remote-hg/master/git-remote-hg
$ chmod +x ~/bin/git-remote-hg
----

…припускаючи, що `~/bin` включений у ваш `$PATH`.
Git-remote-hg має ще одну залежність: бібліотеку `mercurial` для Python.
Якщо у вас встановлено Python, просто виконайте:

[source,console]
----
$ pip install mercurial
----

(Якщо ж у вас не встановлено Python, перейдіть за посиланням https://www.python.org/[] і спочатку встановіть його.)

І останнє, що вам знадобиться, це клієнт Mercurial.
Перейдіть за посиланням http://mercurial.selenic.com/[] і встановіть його, якщо ви цього ще не зробили.

Тепер ви готові побачити магію.
Усе, що вам необхідно, це Mercurial-репозиторій, у який ви можете надсилати зміни.
На щастя, так можна працювати з кожним Mercurial-репозиторієм, тому ми скористаємось репозиторієм "hello world", який використовується для вивчення Mercurial:

[source,console]
----
$ hg clone http://selenic.com/repo/hello /tmp/hello
----

===== Основи

Тепер, коли в нас є "серверний" репозиторій, ми можемо розглянути типові способи роботи з Mercurial.
Як ви побачите згодом, ці дві системи дуже схожі, тому все повинно пройти гладко.

Як і при роботі з Git, спершу ми клонуємо репозиторій:

[source,console]
----
$ git clone hg::/tmp/hello /tmp/hello-git
$ cd /tmp/hello-git
$ git log --oneline --graph --decorate
* ac7955c (HEAD, origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master, master) Create a makefile
* 65bb417 Create a standard "hello, world" program
----

Мабуть ви помітили, що для роботи з Mercurial-репозиторієм використовується стандартна команда `git clone`.
Це тому, що git-remote-hg працює на доволі низькому рівні, і використовує механізм, подібний до HTTP/S протоколу в системі Git (помічники протоколу).
Оскільки і Git, і Mercurial розраховані на те, що кожен клієнт має повну копію історії репозиторія, вищезгадана команда здійснює повне клонування, включно з усією історією проекту, і робить це досить швидко.

Команда `git log` показує два коміти, на останній з яких вказує безліч посилань.
Насправді, не всі з них реально існують.
Погляньмо, що знаходиться всередині директорії `.git`:

[source,console]
----
$ tree .git/refs
.git/refs
├── heads
│   └── master
├── hg
│   └── origin
│       ├── bookmarks
│       │   └── master
│       └── branches
│           └── default
├── notes
│   └── hg
├── remotes
│   └── origin
│       └── HEAD
└── tags

9 directories, 5 files
----

Git-remote-hg намагається нівелювати відмінності між Git та Mercurial, але "під капотом" він керує концептуальними перетвореннями між двома різними системами.
У директорії `refs/hg` знаходяться посилання на об’єкти віддаленого репозиторія.
Наприклад, `refs/hg/origin/branches/default` -- це файл-посилання Git, який містить SHA-1, що починається з "ac7955c", який є комітом, на який вказує гілка `master`.
Таким чином, директорія `refs/hg` -- це щось схоже на `refs/remotes/origin`, але тут окремо зберігаються закладки та гілки.

Файл `notes/hg` -- відправна точка для розуміння того, як git-remote-hg встановлює відповідність між хешами комітів у Git та ідентифікаторами змін у Mercurial.
Погляньмо, що там:

[source,console]
----
$ cat notes/hg
d4c10386...

$ git cat-file -p d4c10386...
tree 1781c96...
author remote-hg <> 1408066400 -0800
committer remote-hg <> 1408066400 -0800

Notes for master

$ git ls-tree 1781c96...
100644 blob ac9117f...	65bb417...
100644 blob 485e178...	ac7955c...

$ git cat-file -p ac9117f
0a04b987be5ae354b710cefeba0e2d9de7ad41a9
----

Отже, `refs/notes/hg` вказує на дерево, яке в базі об’єктів Git містить перелік інших об’єктів та їхніх імен.
Команда `git ls-tree` виводить права доступу, тип, хеш та ім’я файлу для елементів дерева.
Коли ми дістанемось першого елемента дерева, ми побачимо, що всередині знаходиться блоб з іменем "ac9117f" (SHA-1 хеш коміту, на який вказує гілка `master`), який містить "0a04b98" (ідентифікатор останньої зміни гілки `default` у Mercurial).

Хорошою новиною є те, що нам не потрібно турбуватися про все це.
Типовий робочий процес не буде значно відрізнятися від роботи з віддаленим репозиторієм Git.

Є ще одна річ, яку ми повинні враховувати, перш ніж продовжувати: ігноровані файли.
І Mercurial, і Git використовують для цього схожий механізм, але зберігати файл `.gitignore` в Mercurial-репозиторії -- не найкраща ідея.
На щастя, в Git є можливість ігнорувати файли, що знаходяться в локальній копії репозиторія, а формат списку ігнорованих файлів в Mercurial сумісний з Git, тому вам достатньо скопіювати його:

[source,console]
----
$ cp .hgignore .git/info/exclude
----

Файл `.git/info/exclude` діє подібно до `.gitignore`, але не включається у коміт.

===== Робочий процес

Нехай ми виконали певний обсяг роботи і зробили деякі коміти в гілку `master`, і тепер ви готові надіслати зміни до віддаленого репозиторія.
Так виглядає наш репозиторій в цей момент:

[source,console]
----
$ git log --oneline --graph --decorate
* ba04a2a (HEAD, master) Update makefile
* d25d16f Goodbye
* ac7955c (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Create a makefile
* 65bb417 Create a standard "hello, world" program
----

Наша гілка `master` на два коміти попереду `origin/master`, але ці два коміти існують лише на нашій локальній машині.
Погляньмо, раптом хтось інший зробив важливі зміни:

[source,console]
----
$ git fetch
From hg::/tmp/hello
   ac7955c..df85e87  master     -> origin/master
   ac7955c..df85e87  branches/default -> origin/branches/default
$ git log --oneline --graph --decorate --all
* 7b07969 (refs/notes/hg) Notes for default
* d4c1038 Notes for master
* df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation
| * ba04a2a (HEAD, master) Update makefile
| * d25d16f Goodbye
|/
* ac7955c Create a makefile
* 65bb417 Create a standard "hello, world" program
----

Оскільки ми використали `--all` ми бачимо посилання "notes", які використовуються всередині git-remote-hg, але ми можемо не звертати уваги на них.
Все інше -- саме те, що ми очікували; `origin/master` пішов далі на один коміт і наша історія розійшлася.
На відміну від інших систем, з якими ми мали справу в цьому розділі, Mercurial вміє працювати зі злиттям, тому нам не потрібно робити жодних фокусів.

[source,console]
----
$ git merge origin/master
Auto-merging hello.c
Merge made by the 'recursive' strategy.
 hello.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
$ git log --oneline --graph --decorate
*   0c64627 (HEAD, master) Merge remote-tracking branch 'origin/master'
|\
| * df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation
* | ba04a2a Update makefile
* | d25d16f Goodbye
|/
* ac7955c Create a makefile
* 65bb417 Create a standard "hello, world" program
----

Чудово.
Ми запустили наші тести і всі вони пройшли, отже, ми готові ділитися нашими напрацюваннями з рештою команди:

[source,console]
----
$ git push
To hg::/tmp/hello
   df85e87..0c64627  master -> master
----

І це все!
Якщо ви поглянете на Mercurial-репозиторій, ви переконаєтесь, що відбулось саме те, що ми й очікували:

[source,console]
----
$ hg log -G --style compact
o    5[tip]:4,2   dc8fa4f932b8   2014-08-14 19:33 -0700   ben
|\     Merge remote-tracking branch 'origin/master'
| |
| o  4   64f27bcefc35   2014-08-14 19:27 -0700   ben
| |    Update makefile
| |
| o  3:1   4256fc29598f   2014-08-14 19:27 -0700   ben
| |    Goodbye
| |
@ |  2   7db0b4848b3c   2014-08-14 19:30 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard "hello, world" program
----

Набір змін _2_ був здійснений Mercurial’ом, а зміни _3_ та _4_ -- за допомогою git-remote-hg шляхом надсилання комітів, зроблених з Git.

===== Гілки і закладки

Git має лише один вид гілок: вказівник, який переміщується при комітах.
У Mercurial цей вид вказівника називається "закладка", і вона поводить себе подібно до гілки в Git.

Поняття "гілка" в Mercurial більш складне.
Гілка, в якій відбувається зміна, записується _всередині кожної зміни_, таким чином, вона завжди залишається в історії репозиторія.
Ось приклад коміту, який зроблено в гілці `develop`:

[source,console]
----
$ hg log -l 1
changeset:   6:8f65e5e02793
branch:      develop
tag:         tip
user:        Ben Straub <ben@straub.cc>
date:        Thu Aug 14 20:06:38 2014 -0700
summary:     More documentation
----

Зверніть увагу на рядок, що починається з "branch".
Git не може насправді відтворити це (і не повинен; обидва типи гілок можуть бути представлені як Git-посилання), але git-remote-hg змушений розуміти цю різницю, оскільки це важливо для Mercurial.

Створення закладок у Mercurial настільки ж просте, як створення гілок у Git.
У Git ми робимо наступне:

[source,console]
----
$ git checkout -b featureA
Switched to a new branch 'featureA'
$ git push origin featureA
To hg::/tmp/hello
 * [new branch]      featureA -> featureA
----

Ось і все, що потрібно.
А в Mercurial це виглядає так:

[source,console]
----
$ hg bookmarks
   featureA                  5:bd5ac26f11f9
$ hg log --style compact -G
@  6[tip]   8f65e5e02793   2014-08-14 20:06 -0700   ben
|    More documentation
|
o    5[featureA]:4,2   bd5ac26f11f9   2014-08-14 20:02 -0700   ben
|\     Merge remote-tracking branch 'origin/master'
| |
| o  4   0434aaa6b91f   2014-08-14 20:01 -0700   ben
| |    update makefile
| |
| o  3:1   318914536c86   2014-08-14 20:00 -0700   ben
| |    goodbye
| |
o |  2   f098c7f45c4f   2014-08-14 20:01 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard "hello, world" program
----

Зверніть увагу на нову мітку `[featureA]` у п’ятій ревізії.
Це працює так само, як гілки в Git, але з одним винятком: ви не можете видаляти закладки в Git (це обмеження помічників протоколу).

Ви можете працювати і з "повноцінними" Mercurial-гілками: просто розмістіть гілку в просторі імен `branches`:

[source,console]
----
$ git checkout -b branches/permanent
Switched to a new branch 'branches/permanent'
$ vi Makefile
$ git commit -am 'A permanent change'
$ git push origin branches/permanent
To hg::/tmp/hello
 * [new branch]      branches/permanent -> branches/permanent
----

Ось як це виглядає в Mercurial:

[source,console]
----
$ hg branches
permanent                      7:a4529d07aad4
develop                        6:8f65e5e02793
default                        5:bd5ac26f11f9 (inactive)
$ hg log -G
o  changeset:   7:a4529d07aad4
|  branch:      permanent
|  tag:         tip
|  parent:      5:bd5ac26f11f9
|  user:        Ben Straub <ben@straub.cc>
|  date:        Thu Aug 14 20:21:09 2014 -0700
|  summary:     A permanent change
|
| @  changeset:   6:8f65e5e02793
|/   branch:      develop
|    user:        Ben Straub <ben@straub.cc>
|    date:        Thu Aug 14 20:06:38 2014 -0700
|    summary:     More documentation
|
o    changeset:   5:bd5ac26f11f9
|\   bookmark:    featureA
| |  parent:      4:0434aaa6b91f
| |  parent:      2:f098c7f45c4f
| |  user:        Ben Straub <ben@straub.cc>
| |  date:        Thu Aug 14 20:02:21 2014 -0700
| |  summary:     Merge remote-tracking branch 'origin/master'
[...]
----

Ім’я гілки "permanent" було записано разом зі змінами під номером _7_.

З боку Git, робота з обома видами гілок однакова: просто переходите на гілку, робите коміт, отримуєте зміни, робите злиття і надсилаєте зміни (checkout, commit, fetch, merge, pull, і push) як завжди.
Ще одна річ, про яку вам потрібно знати: Mercurial не підтримує перезапис історії, лише додавання.
Ось як наш Mercurial-репозиторій виглядає після інтерактивної зміни історії та примусового надсилання змін:

[source,console]
----
$ hg log --style compact -G
o  10[tip]   99611176cbc9   2014-08-14 20:21 -0700   ben
|    A permanent change
|
o  9   f23e12f939c3   2014-08-14 20:01 -0700   ben
|    Add some documentation
|
o  8:1   c16971d33922   2014-08-14 20:00 -0700   ben
|    goodbye
|
| o  7:5   a4529d07aad4   2014-08-14 20:21 -0700   ben
| |    A permanent change
| |
| | @  6   8f65e5e02793   2014-08-14 20:06 -0700   ben
| |/     More documentation
| |
| o    5[featureA]:4,2   bd5ac26f11f9   2014-08-14 20:02 -0700   ben
| |\     Merge remote-tracking branch 'origin/master'
| | |
| | o  4   0434aaa6b91f   2014-08-14 20:01 -0700   ben
| | |    update makefile
| | |
+---o  3:1   318914536c86   2014-08-14 20:00 -0700   ben
| |      goodbye
| |
| o  2   f098c7f45c4f   2014-08-14 20:01 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard "hello, world" program
----

Були створені зміни _8_, _9_ та _10_ і тепер вони належать до гілки `permanent`, але старі зміни досі там.
Це може *дуже* спантеличити ваших колег, які використовують Mercurial, тому краще уникати цього.


===== Підсумок по Mercurial

Git і Mercurial достатньо подібні для безболісної роботи один з одним.
Якщо ви будете уникати змін вже опублікованої історії (що, загалом, рекомендовано), ви навіть не помітите, що працюєте в Mercurial.
