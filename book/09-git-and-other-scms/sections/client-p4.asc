==== Git і Perforce

(((Interoperation with other VCSs, Perforce)))
(((Perforce)))
Perforce -- дуже популярна система контролю версій у корпоративному середовищі.
Він з’явився у 1995 році, що робить його найстарішою системою контролю версій з тих, що розглядаються у цьому розділі.
Perforce розроблений з обмеженнями тих часів; він передбачає постійне з’єднання з центральним сервером, а локально зберігається лише одна версія файлів.
Насправді, його можливості та обмеження добре підходять для вирішення специфічного кола задач, та існує досить багато проектів, які використовують Perforce, але де Git працював би значно краще.

Існують два варіанти сумісного використання Perforce і Git.
Перший, який ми розглянемо, -- міст ``Git Fusion'' від розробників Perforce, який дозволить вам виставляти піддерева (subtrees) вашого Perforce-депо (Perforce depot) як Git репозиторії з можливістю читання-запису.
Другий -- git-p4 -- клієнтський міст, який дозволяє вам використовувати Git як клієнт Perforce без необхідності здійснювати будь-яке переналаштування сервера Perforce.

[[_p4_git_fusion]]
===== Git Fusion

(((Perforce, Git Fusion)))
Perforce забезпечує продукт, який називається Git Fusion (доступний за посиланням http://www.perforce.com/git-fusion[]), і синхронізує сервер Perforce з репозиторієм Git на стороні сервера.

====== Налаштування

Для наших прикладів ми використаємо найпростіший метод встановлення Git Fusion, який полягає у завантаженні віртуальної машини, на якій виконується Perforce демон і Git Fusion.
Ви можете отримати образ віртуальної машини за посиланням http://www.perforce.com/downloads/Perforce/20-User[], і коли завантаження буде завершено, імпортувати його у ваше улюблене програмне забезпечення для віртуалізації (ми використаємо VirtualBox).

Під час першого запуску віртуальної машини вам потрібно налаштувати паролі для трьох Linux-користувачів (`root`, `perforce` та `git`) і ввести ім’я хоста, яке буде відрізняти це встановлення від інших в одній мережі.
Коли все буде готово, ви побачите наступне:

.Екран віртуальної машини Git Fusion.
image::images/git-fusion-boot.png[Екран віртуальної машини Git Fusion.]

Вам потрібно занотувати цю IP адресу, пізніше ми будемо її використовувати.
Далі ми створимо користувача Perforce.
Виберіть знизу опцію ``Login'' та натисніть `Enter` (або скористайтесь SSH), і увійдіть як `root`.
Потім використайте ці команди для створення користувача:

[source,console]
----
$ p4 -p localhost:1666 -u super user -f john
$ p4 -p localhost:1666 -u john passwd
$ exit
----

Перша команда відкриє редактор VI для редагування користувача, але ви можете прийняти типові налаштування і ввести `:wq` та натиснути `Enter`.
Друга команда двічі попросить вас ввести пароль.
Це все, що нам потрібно виконати в оболонці системи, тому завершіть поточну сесію.

Наступне, що вам потрібно зробити, це заборонити Git перевіряти SSL сертифікати.
Образ Git Fusion розповсюджується з сертифікатом, але він для домену, що не відповідає IP адресі вашої віртуальної машини, тому Git відхилить HTTPS-з’єднання.
Якщо це встановлення буде використовуватись на постійній основі, зверніться до документації Git Fusion, щоб встановити інший сертифікат; а для нашої навчальної мети підійде наступне:

[source,console]
----
$ export GIT_SSL_NO_VERIFY=true
----

Тепер ми можемо переконатися, що все працює.

[source,console]
----
$ git clone https://10.0.1.254/Talkhouse
Cloning into 'Talkhouse'...
Username for 'https://10.0.1.254': john
Password for 'https://john@10.0.1.254':
remote: Counting objects: 630, done.
remote: Compressing objects: 100% (581/581), done.
remote: Total 630 (delta 172), reused 0 (delta 0)
Receiving objects: 100% (630/630), 1.22 MiB | 0 bytes/s, done.
Resolving deltas: 100% (172/172), done.
Checking connectivity... done.
----

Образ віртуальної машини розповсюджується з тестовим проектом, який ви можете клонувати.
Тут ми клонуємо проект через HTTPS-з’єднання, з користувачем `john`, якого ми створили вище; Git запитає пароль для цього з’єднання, але кеш паролів дозволить нам пропускати цей крок для будь-яких наступних запитів.

====== Налаштування Fusion

Після встановлення Git Fusion ви, мабуть, захочете налаштувати його.
Насправді, це відносно легко зробити з використанням вашого улюбленого клієнта Perforce; просто відобразіть директорію `//.git-fusion` на сервері Perforce у ваш робочий простір.
Структура файлів повинна бути подібною до:

[source,console]
----
$ tree
.
├── objects
│   ├── repos
│   │   └── [...]
│   └── trees
│       └── [...]
│
├── p4gf_config
├── repos
│   └── Talkhouse
│       └── p4gf_config
└── users
    └── p4gf_usermap

498 directories, 287 files
----

Директорія `objects` використовується Git Fusion для відображення об’єктів Perforce у об’єкти Git і навпаки, вам не варто тут нічого змінювати.
Всередині цієї директорії знаходиться глобальний файл `p4gf_config`, а також по одному для кожного репозиторія - це файли конфігурації, які визначають поведінку Git Fusion.
Погляньмо на файл, що знаходиться в корені:

[source,ini]
----
[repo-creation]
charset = utf8

[git-to-perforce]
change-owner = author
enable-git-branch-creation = yes
enable-swarm-reviews = yes
enable-git-merge-commits = yes
enable-git-submodules = yes
preflight-commit = none
ignore-author-permissions = no
read-permission-check = none
git-merge-avoidance-after-change-num = 12107

[perforce-to-git]
http-url = none
ssh-url = none

[@features]
imports = False
chunked-push = False
matrix2 = False
parallel-push = False

[authentication]
email-case-sensitivity = no
----

Ми не будемо детально розглядати ці опції, але зверніть увагу на те, що це звичайний INI-файл, подібний до файлів конфігурації, які використовує Git.
Цей файл задає глобальні опції, які можуть бути перевизначені специфічними для кожного репозиторія файлами конфігурації, такими, як `repos/Talkhouse/p4gf_config`.
Якщо ви відкриєте цей файл, то побачите секцію `[@repo]` з деякими налаштуваннями, які відрізняються від типових глобальних налаштувань.
Ви також побачите секції, які виглядають подібно до цього:

[source,ini]
----
[Talkhouse-master]
git-branch-name = master
view = //depot/Talkhouse/main-dev/... ...
----

Вони задають відповідність між гілками Perforce та гілками Git.
Назви таких секцій можуть бути довільними, поки ці назви залишаються унікальними.
Команда `git-branch-name` дозволяє вам конвертувати недоладний для Git шлях всередині депо, щоб у Git мати більш дружелюбне ім’я.
Параметр `view` керує відображенням файлів Perforce у репозиторії Git з використанням стандартного синтаксису відображення видів.
Більш ніж одне відображення можна визначити як у прикладі нижче:

[source,ini]
----
[multi-project-mapping]
git-branch-name = master
view = //depot/project1/main/... project1/...
       //depot/project2/mainline/... project2/...
----

Таким чином, якщо ваше нормальне відображення включає зміни структури директорій, ви можете відтворити це за допомогою Git-репозиторія.

Останній файл, про який ми поговоримо, це `users/p4gf_usermap`, який відображає користувачів Perforce у користувачів Git, і який, можливо, вам і не знадобиться.

Коли Perforce конвертує набір змін (changeset) у Git коміт, типова поведінка Git Fusion -- пошук користувача Perforce і використання адреси його електронної пошти та повного імені для заповнення поля "автор коміту" в Git.
При конвертуванні у зворотному напрямку, типова поведінка -- пошук користувача Perforce з адресою електронної пошти в полі "автор коміту" у Git, та застосовує набір змін від імені цього користувача (з використанням прав доступу).
У більшості випадків така поведінка є нормальною, але розгляньмо наступний файл відповідностей:

[source]
----
john john@example.com "John Doe"
john johnny@appleseed.net "John Doe"
bob employeeX@example.com "Anon X. Mouse"
joe employeeY@example.com "Anon Y. Mouse"
----

Кожний рядок має формат `<user> <email> "<full name>"` і створює відповідність для одного користувача.
Перші два рядки відображають дві різні адреси електронної пошти для одного користувача Perforce.
Це може бути корисним, якщо ви створили коміти у Git з різних адрес електронної пошти (або змінили свою електронну пошту), але хочете їх відобразити на одного й того ж користувача Perforce.
При створенні комітів у Git з набору змін Perforce, перший рядок, який відповідає користувачу Perforce, використовується Git як інформація про авторство.

Останні два рядки маскують справжні імена та адреси електронної пошти Боба і Джо у комітах Git при їх створенні.
Це корисно, якщо ви хочете вивести ваш внутрішній проект в open-source, але не хочете публікувати свій каталог співробітників для всього світу.
Зауважте, що адреси електронної пошти і повні імена повинні бути унікальними, якщо ви не хочете, щоб всі коміти Git належали одному фіктивному автору.

====== Робочий процес

Perforce Git Fusion -- це двосторонній міст між системами контролю версій Perforce і Git.
Погляньмо, як виглядає робота з боку Git.
Нехай ми налаштували відображення проекту ``Jam'' з використанням файла конфігурації, як показано вище, який ми можемо клонувати таким чином:

[source,console]
----
$ git clone https://10.0.1.254/Jam
Cloning into 'Jam'...
Username for 'https://10.0.1.254': john
Password for 'https://ben@10.0.1.254':
remote: Counting objects: 2070, done.
remote: Compressing objects: 100% (1704/1704), done.
Receiving objects: 100% (2070/2070), 1.21 MiB | 0 bytes/s, done.
remote: Total 2070 (delta 1242), reused 0 (delta 0)
Resolving deltas: 100% (1242/1242), done.
Checking connectivity... done.
$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
  remotes/origin/rel2.1
$ git log --oneline --decorate --graph --all
* 0a38c33 (origin/rel2.1) Create Jam 2.1 release branch.
| * d254865 (HEAD, origin/master, origin/HEAD, master) Upgrade to latest metrowerks on Beos -- the Intel one.
| * bd2f54a Put in fix for jam's NT handle leak.
| * c0f29e7 Fix URL in a jam doc
| * cc644ac Radstone's lynx port.
[...]
----

Якщо ви робите клонування вперше, це може тривати деякий час.
При цьому Git Fusion конвертує усі можливі набори змін з історії Perforce у коміти Git.
Це відбувається локально на сервері, тому ця операція здійснюється відносно швидко, але якщо у вас багато історії, цей процес триватиме деякий час.
Наступні отримання змін вимагають лише інкрементних перетворень, таким чином, швидкість роботи буде порівняна зі швидкістю роботи з Git.

Як ви бачите, наш репозиторій виглядає як і будь-який інший Git-репозиторій, з яким ви могли працювати.
Тут є три гілки і Git доречно створив локальну гілку `master`, яка відслідковує `origin/master`.
Попрацюймо трохи і створімо кілька нових комітів:

[source,console]
----
# ...
$ git log --oneline --decorate --graph --all
* cfd46ab (HEAD, master) Add documentation for new feature
* a730d77 Whitespace
* d254865 (origin/master, origin/HEAD) Upgrade to latest metrowerks on Beos -- the Intel one.
* bd2f54a Put in fix for jam's NT handle leak.
[...]
----

Ми маємо два нових коміти.
Погляньмо, чи вносив зміни хтось інший:

[source,console]
----
$ git fetch
remote: Counting objects: 5, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 2), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://10.0.1.254/Jam
   d254865..6afeb15  master     -> origin/master
$ git log --oneline --decorate --graph --all
* 6afeb15 (origin/master, origin/HEAD) Update copyright
| * cfd46ab (HEAD, master) Add documentation for new feature
| * a730d77 Whitespace
|/
* d254865 Upgrade to latest metrowerks on Beos -- the Intel one.
* bd2f54a Put in fix for jam's NT handle leak.
[...]
----

Схоже, хтось таки вносив!
Ви не дізнаєтесь цього з виводу команди `git fetch`, але коміт `6afeb15` був створений за допомогою клієнта Perforce.
Він виглядає як інший звичайний коміт з точки зору Git, для чого й створений Git Fusion.
Погляньмо, як сервер Perforce працює з комітом злиття:

[source,console]
----
$ git merge origin/master
Auto-merging README
Merge made by the 'recursive' strategy.
 README | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
$ git push
Counting objects: 9, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (9/9), done.
Writing objects: 100% (9/9), 917 bytes | 0 bytes/s, done.
Total 9 (delta 6), reused 0 (delta 0)
remote: Perforce: 100% (3/3) Loading commit tree into memory...
remote: Perforce: 100% (5/5) Finding child commits...
remote: Perforce: Running git fast-export...
remote: Perforce: 100% (3/3) Checking commits...
remote: Processing will continue even if connection is closed.
remote: Perforce: 100% (3/3) Copying changelists...
remote: Perforce: Submitting new Git commit objects to Perforce: 4
To https://10.0.1.254/Jam
   6afeb15..89cba2b  master -> master
----

З боку Git це працює.
Погляньмо на історію файла `README` з боку Perforce, скориставшись графом ревізій `p4v`:

.Граф ревізій Perforce після надсилання даних з Git.
image::images/git-fusion-perforce-graph.png[Граф ревізій Perforce після надсилання даних з Git.]

Якщо ви ніколи такого не бачили, це може вас спантеличити, але його концепція схожа з графічним переглядачем для історії Git.
Ми дивимось на історію файла `README`, тому дерево директорії ліворуч вгорі показує лише цей файл, коли він змінюється в різноманітних гілках.
Праворуч вгорі ми бачимо візуалізацію залежностей різних версій файла і повну версію цього графу внизу праворуч.
Решта вікна залишена для детального відображення вибраної ревізії (у цьому випадку, другої).

Одна річ, яку потрібно зауважити, граф виглядає так само, як і в історії Git.
У Perforce не було іменованої гілки для зберігання комітів `1` і `2`, тому він створив ``анонімну'' гілку в директорії `.git-fusion` для їх збереження.
Perforce буде діяти схожим чином і з іменованими гілками Git, які не відповідають іменам гілок Perforce (але ви можете задати для них відповідності у файлі конфігурації Perforce).

Більшість з цього відбувається всередині Git Fusion, але в результаті один член команди може користуватися Git, а інший -- Perforce, і жоден з них не буде знати про вибір іншого.

====== Підсумок по Git-Fusion

Якщо у вас є (або ви можете отримати) доступ до вашого сервера Perforce, Git Fusion стане чудовим способом налагодження співпраці між Git та Perforce.
Звичайно, для цього потрібно налаштувати конфігурацію, але загалом цей процес не є занадто складним.
Це одна з небагатьох секцій цього розділу, де не з’являлись попередження про використання всього функціоналу Git.
Але це не означає, що Perforce зможе виконати все, що ви захочете - якщо ви спробуєте перезаписати історію, яка вже надіслана на сервер, Git Fusion відхилить такі зміни - але Git Fusion намагається зробити все можливе, щоб ви не відчували незручностей.
Ви можете навіть використовувати підмодулі Git (хоча вони й будуть виглядати дивно для користувачів Perforce), і зливати гілки (з боку Perforce це буде виглядати як інтеграція).

Якщо ви не зможете вмовити адміністратора вашого серверу налаштувати Git Fusion, все одно існує спосіб використання цих інструментів разом.

===== Git-p4

(((git commands, p4)))
Git-p4 -- це двосторонній міст між Git та Perforce.
Він працює повністю всередині вашого репозиторія Git, тому вам взагалі не потрібно мати доступ до сервера Perforce (звичайно, вам знадобляться логін і пароль).
Git-p4 не такий гнучкий та функціональний, як Git Fusion, але він дозволяє здійснювати більшість з того, що вам буде необхідно, без втручання у середовище сервера.

[NOTE]
======
Для роботи з git-p4 вам знадобиться виконуваний файл `p4`, доступний у вашому `PATH`.
На момент написання книги, він вільно доступний за посиланням http://www.perforce.com/downloads/Perforce/20-User[].
======

====== Налаштування

Для навчальної мети, ми запустимо сервер Perforce з віртуальної машини Git Fusion OVA, як було показано вище, але ми будемо оминати сервер Git Fusion і напряму звертатися до системи контролю версій Perforce.

Для використання клієнта командного рядка `p4` (від якого залежить git-p4), вам буде потрібно прописати кілька змінних середовища:

[source,console]
----
$ export P4PORT=10.0.1.254:1666
$ export P4USER=john
----

====== Початок роботи

Як і зазвичай при роботі з Git, перша команда -- клонування:

[source,console]
----
$ git p4 clone //depot/www/live www-shallow
Importing from //depot/www/live into www-shallow
Initialized empty Git repository in /private/tmp/www-shallow/.git/
Doing initial import of //depot/www/live/ from revision #head into refs/remotes/p4/master
----

Ми створили те, що у термінах Git називається ``поверхнева'' (shallow) копія; лише найостанніша ревізія Perforce імпортована у Git; пам’ятайте, що Perforce не призначений віддавати кожну ревізію кожному користувачу.
Цього достатньо для використання Git як клієнта Perforce, але цього недостатньо для інших задач.

Коли клонування завершиться, ми будемо мати повнофункціональний репозиторій Git:

[source,console]
----
$ cd myproject
$ git log --oneline --all --graph --decorate
* 70eaf78 (HEAD, p4/master, p4/HEAD, master) Initial import of //depot/www/live/ from the state at revision #head
----

Зверніть увагу на наявність віддаленого репозиторія ``p4'' для сервера Perforce, але все інше виглядає стандартно для клонованого репозиторія.
Насправді, це нас трохи вводить в оману; виявляється, там немає ніякого віддаленого репозиторія.

[source,console]
----
$ git remote -v
----

Ніяких віддалених репозиторіїв не існує взагалі.
Git-p4 створив кілька посилань для представлення стану сервера, і вони схожі на посилання віддаленого репозиторія для `git log`, але вони не обслуговуються Git і ви не можете надсилати зміни у них.

====== Порядок роботи

Отже, почнімо працювати.
Припустимо, ви виконали певний обсяг роботи по дуже важливій задачі, і ви готові показати свою роботу решті команди.

[source,console]
----
$ git log --oneline --all --graph --decorate
* 018467c (HEAD, master) Change page title
* c0fb617 Update link
* 70eaf78 (p4/master, p4/HEAD) Initial import of //depot/www/live/ from the state at revision #head
----

Ми зробити два нових коміти, які вже готові до відправлення на сервер Perforce.
Погляньмо, чи хтось інший сьогодні робив зміни:

[source,console]
----
$ git p4 sync
git p4 sync
Performing incremental import into refs/remotes/p4/master git branch
Depot paths: //depot/www/live/
Import destination: refs/remotes/p4/master
Importing revision 12142 (100%)
$ git log --oneline --all --graph --decorate
* 75cd059 (p4/master, p4/HEAD) Update copyright
| * 018467c (HEAD, master) Change page title
| * c0fb617 Update link
|/
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head
----

Схоже, що так, і гілки `master` та `p4/master` розійшлися.
Система галудження Perforce _абсолютно_ не схожа на Git, тому відправлення комітів злиття не має жодного сенсу.
Git-p4 рекомендує перебазувати ваші коміти, і навіть надає спеціальну команду для цього:

[source,console]
----
$ git p4 rebase
Performing incremental import into refs/remotes/p4/master git branch
Depot paths: //depot/www/live/
No changes to import!
Rebasing the current branch onto remotes/p4/master
First, rewinding head to replay your work on top of it...
Applying: Update link
Applying: Change page title
 index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
----

Ви, можливо, скажете, що `git p4 rebase` -- це лише скорочення для `git p4 sync` з наступним `git rebase p4/master`.
Насправді, ця команда трохи розумніша, особливо при роботі з багатьма гілками, але це вірна здогадка.

Тепер наша історія змін знову лінійна, і ми готові надіслати наші зміни до Perforce.
Команда `git p4 submit` буде намагатися створити нову ревізію Perforce для кожного коміту Git між `p4/master` і `master`.
Її запуск відкриє ваш улюблений редактор, і вміст файлу буде схожим на це:

[source,console]
----
# A Perforce Change Specification.
#
#  Change:      The change number. 'new' on a new changelist.
#  Date:        The date this specification was last modified.
#  Client:      The client on which the changelist was created.  Read-only.
#  User:        The user who created the changelist.
#  Status:      Either 'pending' or 'submitted'. Read-only.
#  Type:        Either 'public' or 'restricted'. Default is 'public'.
#  Description: Comments about the changelist.  Required.
#  Jobs:        What opened jobs are to be closed by this changelist.
#               You may delete jobs from this list.  (New changelists only.)
#  Files:       What opened files from the default changelist are to be added
#               to this changelist.  You may delete files from this list.
#               (New changelists only.)

Change:  new

Client:  john_bens-mbp_8487

User: john

Status:  new

Description:
   Update link

Files:
   //depot/www/live/index.html   # edit


######## git author ben@straub.cc does not match your p4 account.
######## Use option --preserve-user to modify authorship.
######## Variable git-p4.skipUserNameCheck hides this message.
######## everything below this line is just the diff #######
--- //depot/www/live/index.html  2014-08-31 18:26:05.000000000 0000
+++ /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/index.html   2014-08-31 18:26:05.000000000 0000
@@ -60,7 +60,7 @@
 </td>
 <td valign=top>
 Source and documentation for
-<a href="http://www.perforce.com/jam/jam.html">
+<a href="jam.html">
 Jam/MR</a>,
 a software build tool.
 </td>
----

Це практично ті ж самі дані, які б ви побачили, запустивши `p4 submit`, за винятком кількох рядків у кінці, які були доречно додані git-p4.
Git-p4 намагається враховувати ваші індивідуальні налаштування для Git і Perforce, коли потрібно надати ім’я для коміту або набору змін, але у деяких випадках ви захочете змінити їх.
Наприклад, якщо коміт Git, який ви імпортуєте, був створений користувачем, який не має облікового запису Perforce, можливо, ви все одно захочете, щоб кінцевий набір змін виглядав так, ніби він був створений тим користувачем (а не вами).

Git-p4 доречно імпортував повідомлення з коміту Git як вміст для набору змін Perforce, тому все, що нам потрібно зробити, це зберегти і вийти, двічі (по одному разу для кожного коміту).
У результаті, вивід командного рядка буде виглядати так:

[source,console]
----
$ git p4 submit
Perforce checkout for depot path //depot/www/live/ located at /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/
Synchronizing p4 checkout...
... - file(s) up-to-date.
Applying dbac45b Update link
//depot/www/live/index.html#4 - opened for edit
Change 12143 created with 1 open file(s).
Submitting change 12143.
Locking 1 files ...
edit //depot/www/live/index.html#5
Change 12143 submitted.
Applying 905ec6a Change page title
//depot/www/live/index.html#5 - opened for edit
Change 12144 created with 1 open file(s).
Submitting change 12144.
Locking 1 files ...
edit //depot/www/live/index.html#6
Change 12144 submitted.
All commits applied!
Performing incremental import into refs/remotes/p4/master git branch
Depot paths: //depot/www/live/
Import destination: refs/remotes/p4/master
Importing revision 12144 (100%)
Rebasing the current branch onto remotes/p4/master
First, rewinding head to replay your work on top of it...
$ git log --oneline --all --graph --decorate
* 775a46f (HEAD, p4/master, p4/HEAD, master) Change page title
* 05f1ade Update link
* 75cd059 Update copyright
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head
----

Результат виглядає так, ніби ми щойно виконали `git push`, і це дуже близько до того, що насправді відбулося.

Зверніть увагу, що під час цього процесу кожен коміт Git перетворюється у набір змін Perforce; якщо ви хочете зварити їх (squash) в один набір змін, ви можете скористатися інтерактивним перебазуванням перед запуском `git p4 submit`.
Також зазначте, що хеші SHA-1 усіх комітів, перетворених у набори змін, також змінилися; це сталося тому, що git-p4 додає рядок у кінець кожного коміту, який конвертує:

[source,console]
----
$ git log -1
commit 775a46f630d8b46535fc9983cf3ebe6b9aa53145
Author: John Doe <john@example.com>
Date:   Sun Aug 31 10:31:44 2014 -0800

    Change page title

    [git-p4: depot-paths = "//depot/www/live/": change = 12144]
----

А що станеться, якщо ви спробуєте відправити коміт злиття?
Спробуймо.
Припустимо, у нас є така ситуація:

[source,console]
----
$ git log --oneline --all --graph --decorate
* 3be6fd8 (HEAD, master) Correct email address
*   1dcbf21 Merge remote-tracking branch 'p4/master'
|\
| * c4689fc (p4/master, p4/HEAD) Grammar fix
* | cbacd0a Table borders: yes please
* | b4959b6 Trademark
|/
* 775a46f Change page title
* 05f1ade Update link
* 75cd059 Update copyright
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head
----

Історія змін Git розійшлась з історією Perforce після `775a46f`.
У Git є два коміти, потім коміт злиття з Perforce, а потім інший коміт.
Ми спробуємо надіслати це у набір змін на боці Perforce.
Погляньмо, що трапиться, якщо ми спробуємо надіслати зараз:

[source,console]
----
$ git p4 submit -n
Perforce checkout for depot path //depot/www/live/ located at /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/
Would synchronize p4 checkout in /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/
Would apply
  b4959b6 Trademark
  cbacd0a Table borders: yes please
  3be6fd8 Correct email address
----

Прапорець `-n` -- це скорочення для `--dry-run`, який намагається повідомити, що б сталося, якби б відправлення відбулось насправді.
У цьому випадку, схоже, ми створили три набори змін Perforce, які відповідають трьом звичайним комітам (крім коміту злиття), які ще не існують на сервері Perforce.
Це звучить саме так, як ми й хотіли, погляньмо на вивід:

[source,console]
----
$ git p4 submit
[…]
$ git log --oneline --all --graph --decorate
* dadbd89 (HEAD, p4/master, p4/HEAD, master) Correct email address
* 1b79a80 Table borders: yes please
* 0097235 Trademark
* c4689fc Grammar fix
* 775a46f Change page title
* 05f1ade Update link
* 75cd059 Update copyright
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head
----

Наша історія змін стала лінійною, ніби ми перебазувалися перед відправленням (що насправді й відбулося).
Це означає, що ви можете вільно створювати, працювати, викидати, і зливати гілки на стороні Git без страху, що ваша історія змін якимось чином стане несумісною з Perforce.
Якщо ви можете перебазувати зміни, ви можете відправити їх на сервер Perforce.

[[_git_p4_branches]]
====== Галуження

Якщо ваш проект Perforce має декілька гілок, не турбуйтеся; git-p4 може впоратися з цим так, що ви не відчуєте різниці у порівнянні з Git.
Припустімо, ваш репозиторій Perforce має таку структуру:

[source]
----
//depot
  └── project
      ├── main
      └── dev
----

І нехай ви маєте гілку `dev`, яка налаштована наступним чином:

[source]
----
//depot/project/main/... //depot/project/dev/...
----

Git-p4 може автоматично виявляти такі ситуації і виконувати потрібні дії:

[source,console]
----
$ git p4 clone --detect-branches //depot/project@all
Importing from //depot/project@all into project
Initialized empty Git repository in /private/tmp/project/.git/
Importing revision 20 (50%)
    Importing new branch project/dev

    Resuming with change 20
Importing revision 22 (100%)
Updated branches: main dev
$ cd project; git log --oneline --all --graph --decorate
* eae77ae (HEAD, p4/master, p4/HEAD, master) main
| * 10d55fb (p4/project/dev) dev
| * a43cfae Populate //depot/project/main/... //depot/project/dev/....
|/
* 2b83451 Project init
----

Зверніть увагу на ``@all'' в шляху; це говорить git-p4 клонувати не лише останній набір змін для цього піддерева, а й усі набори змін, яких стосуються ці шляхи.
Це ближче до концепції клонування Git, але якщо ви працюєте над проектом з довгою історією, це може зайняти деякий час.

Прапорець `--detect-branches` говорить git-p4 використовувати налаштування гілок Perforce для відображення на посилання Git.
Якщо таких відображень на сервері Perforce немає (що цілком коректно для Perforce), ви можете вказати git-p4 ці гілки вручну, і отримаєте такий самий результат:

[source,console]
----
$ git init project
Initialized empty Git repository in /tmp/project/.git/
$ cd project
$ git config git-p4.branchList main:dev
$ git clone --detect-branches //depot/project@all .
----

Задавши конфігураційну змінну `git-p4.branchList` рівною `main:dev`, ми говоримо git-p4, що і ``main'' і ``dev'' є гілками, а друга є нащадком першої.

Якщо ми тепер виконаємо `git checkout -b dev p4/project/dev` і зробимо кілька комітів, git-p4 достатньо розумний, щоб зрозуміти, у яку гілку надсилати зміни при виконанні команди `git p4 submit`.
На жаль, git-p4 не може використовувати декілька гілок у поверхневих копіях; якщо у вас величезний проект і ви хочете працювати з більш ніж однією гілкою, вам доведеться виконувати `git p4 clone` для кожної гілки, у яку ви хочете надіслати зміни.

Для створення чи інтеграції гілок ви повинні використовувати клієнт Perforce.
Git-p4 може лише синхронізувати і відправляти зміни у гілки, які вже існують, і може це робити лише з одним лінійним набором змін за раз.
Якщо ви зіллєте дві гілки у Git та спробуєте надіслати новий набір змін, все, що збережеться -- це купа змін у файлах; метадані про гілки, які були змінені при інтеграції, будуть втрачені.

===== Підсумок по Git і Perforce

Git-p4 робить можливим використання Git з сервером Perforce, і робить це досить добре.
Однак, важливо пам’ятати, що Perforce все одно залишається джерелом даних, і ви використовуєте Git лише для локальної роботи.
Будьте дуже обережні при публікації комітів Git; якщо ви маєте віддалений репозиторій, який використовують інші люди, не надсилайте жодних комітів, які ще не надіслані на сервер Perforce.

Якщо ви хочете вільно змішувати Perforce і Git як клієнти для контролю версій, і ви можете переконати адміністратора сервера встановити їх, Git Fusion зробить використання Git у якості клієнта контролю версій для сервера Perforce повноцінним.
