[[_perforce_import]]
==== Perforce

(((Perforce)))(((Importing, from Perforce)))
Наступна система, яку ви розглянете для імпорту -- Perforce.
Як ми вже обговорювали, існує два способи співпраці Git з Perforce: git-p4 та Perforce Git Fusion.

===== Perforce Git Fusion

Git Fusion робить цей процес зовсім безболісним.
Просто встановіть налаштування вашого проекту, відображення користувачів та гілки за допомогою файлу конфігурації (як описано в <<_p4_git_fusion>>) та зробіть клон репозиторія.
Git Fusion створить для вас те, що виглядає як рідний Git репозиторій, який вже готовий для надсилання до серверу Git, якщо бажаєте.
Ви можете навіть використовувати Perforce як сервер для Git, якщо хочете.

[[_git_p4]]
===== Git-p4

Git-p4 також може бути інструментом для імпортування.
Для прикладу, ми імпортуємо проект Jam з Perforce Public Depot.
Щоб налаштувати клієнта, ви маєте експортувати змінну середовища P4PORT, щоб вона вказувала на депо Perforce:

[source,console]
----
$ export P4PORT=public.perforce.com:1666
----

[NOTE]
====
Щоб розуміти що коїться, вам потрібно мати депо Perforce, з яким можна зʼєднатися.
Ми використовуємо публічне депо на public.perforce.com, проте ви можете використати будь-яке депо, що якого маєте доступ.
====

(((git commands, p4)))
Виконайте команду `git p4 clone`, щоб імпортувати проект Jam з сервера Perforce, надайте депо та шлях проетку, а також шлях, до якого ви бажаєте імпортувати проект:

[source,console]
----
$ git-p4 clone //guest/perforce_software/jam@all p4import
Importing from //guest/perforce_software/jam@all into p4import
Initialized empty Git repository in /private/tmp/p4import/.git/
Import destination: refs/remotes/p4/master
Importing revision 9957 (100%)
----

Саме цей проект має лише одну гілку, проте, якщо у вас декілька гілок, які налаштовані відображенням гілок (або просто набором директорій), то можете використати опцію `--detect-branches` з `git p4 clone`, щоб також імпортувати всі гілки проекту.
Дивіться <<_git_p4_branches>> для трохи детальнішої інформації про це.

Наразі, ви майже все зробили.
Якщо перейти до директорії `p4import` та виконати `git log`, то ви побачите імпортовану роботу:

[source,console]
----
$ git log -2
commit e5da1c909e5db3036475419f6379f2c73710c4e6
Author: giles <giles@giles@perforce.com>
Date:   Wed Feb 8 03:13:27 2012 -0800

    Correction to line 355; change </UL> to </OL>.

    [git-p4: depot-paths = "//public/jam/src/": change = 8068]

commit aa21359a0a135dda85c50a7f7cf249e4f7b8fd98
Author: kwirth <kwirth@perforce.com>
Date:   Tue Jul 7 01:35:51 2009 -0800

    Fix spelling error on Jam doc page (cummulative -> cumulative).

    [git-p4: depot-paths = "//public/jam/src/": change = 7304]
----

Як бачите, `git-p4` залишив ідентифікатор у кожному повідомленні коміту.
Ви можете залишити їх на випадок, якщо вам потрібно буде пізніше послатись на номер зміни Perforce.
Втім, якщо ви бажаєте вилучити ідентифікатор, зараз саме час для цього – перед початком роботи в новому сховищі.
(((git commands, filter-branch)))
Ви можете використати `git filter-branch`, щоб вилучити рядки ідентифікаторів гуртом:

[source,console]
----
$ git filter-branch --msg-filter 'sed -e "/^\[git-p4:/d"'
Rewrite e5da1c909e5db3036475419f6379f2c73710c4e6 (125/125)
Ref 'refs/heads/master' was rewritten
----

Якщо ви виконаєте `git log`, то побачите, що всі суми SHA-1 комітів змінилися, проте рядків `git-p4` більше немає в повідомленнях комітів:

[source,console]
----
$ git log -2
commit b17341801ed838d97f7800a54a6f9b95750839b7
Author: giles <giles@giles@perforce.com>
Date:   Wed Feb 8 03:13:27 2012 -0800

    Correction to line 355; change </UL> to </OL>.

commit 3e68c2e26cd89cb983eb52c024ecdfba1d6b3fff
Author: kwirth <kwirth@perforce.com>
Date:   Tue Jul 7 01:35:51 2009 -0800

    Fix spelling error on Jam doc page (cummulative -> cumulative).
----

Ваше імпортоване сховище готове для надсилання до нового сервера Git.
